#!/usr/bin/env python
import argparse
import os

import demosaicnet.models as models

def main(args):
    if not os.path.exists(args.output):
        os.makedirs(args.output)
    snapshot_dir = os.path.join(args.output, 'snapshots')
    if not os.path.exists(snapshot_dir):
        os.makedirs(snapshot_dir)
    train_net = models.demosaic(
            args.depth, args.width, args.kernel_size, args.batch_size,
            trainset=args.train_db,
            mosaic_type=args.mosaic_type,
            min_noise=0, max_noise=args.max_noise, pad=args.pad)
    test_net = models.demosaic(
            args.depth, args.width, args.kernel_size, args.batch_size,
            trainset=args.test_db,
            mosaic_type=args.mosaic_type,
            min_noise=0, max_noise=args.max_noise, pad=args.pad)
    deploy_net = models.demosaic(
            args.depth, args.width, args.kernel_size, args.batch_size,
            trainset=None,
            mosaic_type=args.mosaic_type,
            min_noise=0, max_noise=args.max_noise, pad=args.pad)
    with open(os.path.join(args.output, 'train.prototxt'), 'w') as W:
      W.write('%s\n' % train_net.to_proto())
    with open(os.path.join(args.output, 'test.prototxt'), 'w') as W:
      W.write('%s\n' % test_net.to_proto())
    with open(os.path.join(args.output, 'deploy.prototxt'), 'w') as W:
      W.write('%s\n' % deploy_net.to_proto())

    with open(os.path.join(args.output, 'solver.prototxt'), 'w') as W:
      W.write("""# The train net protocol buffer definition
net: "{output}/train.prototxt"
# test_net: "train.prototxt"

# Solver parameters
solver_type: ADAM
delta: 1e-8
momentum: 0.9
momentum2: 0.999
lr_policy: "fixed"
base_lr: 0.0001

# Regularization
regularization_type:"L2"
weight_decay: 1e-08

# Accumulate gradients over batch_size*iter_size
iter_size: 1

# Display every x iterations
display: 100
average_loss: 1000

# The maximum number of iterations
max_iter: 10000000

# Test
# test_iter: 1
# test_interval: 500

# Snapshot intermediate results
snapshot: 1000
snapshot_prefix: "{snapshot}/"
solver_mode: GPU""".format(output=args.output, snapshot=snapshot_dir))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--train_db', type=str, default='data/db/train')
    parser.add_argument('--test_db', type=str, default='data/db/val')
    parser.add_argument('--output', type=str, default='new_model')
    parser.add_argument('--batch_size', type=int, default=1)
    parser.add_argument('--depth', type=int, default=15)
    parser.add_argument('--width', type=int, default=64)
    parser.add_argument('--kernel_size', type=int, default=3)
    parser.add_argument('--max_noise', type=float, default=0.0)
    parser.add_argument('--pad', action='store_true')
    parser.add_argument('--no-pad', dest='pad', action='store_false')
    parser.set_defaults(pad=False)
    parser.add_argument('--mosaic_type', type=str, default='bayer',
                        choices=['bayer', 'xtrans'])

    args = parser.parse_args()

    main(args)
